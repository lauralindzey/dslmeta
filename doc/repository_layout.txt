Revision History  
2013-03-14    mvj    Initial draft.
2013-08-05    mvj    Updated quick-start to use known-compatible 
                     revisions of dslcommon, navest, rov-core.
2013-08-07    LLW    Minor corrections and additions to example installation and build instrucitons
2013-08-08    MVJ    Minor changes to navest-related compilation to
                     reflect partial adoption of the model proposed
                     here.

We have chosen mercurial (hg) as our version control system moving
forward.  Conversion of our existing svn repositories into hg also
provides an opportunity to reorganize our source in ways that conform
better to accepted practices and integrate more readily with the
build-management tool cmake.  

An important distinction between hg and svn is the inability to
perform partial checkouts in hg.  This favors a large number of
relatively small repositories as opposed to a few big ones.  This
argues for a more thorough adoption of cmake to handle the
dependencies between repositories and for repositories to be focused
on building libraries rather than executables.  Executables remain the
end-goal of course, but their sources should be relatively small and
link heavily against libraries from the same repository or elsewhere.  

To enable cmake to handle external dependencies we should adopt the
use of 'make install' for installing generated binaries and header
files into agreed upon system locations.  This approach has two
advantages over linking and references between source trees: (1)
source does not have to be checked out into specific places on a users
system---this is more important now that we will have many small
repositories as opposed to a few large ones that would otherwise
impose a directory structure; (2) users can clone multiple versions of
the same repository, develop and compile in each as desired, and
readily switch between installed versions by executing 'make install'
in the desired repository.  There is at least one major liability
introduced by adopting the use of 'make install'.  It will become
possible to fix a bug, compile the code, but then forget to install
it, resulting in the execution of an old and presumably buggy
executable.

Installation of generated binaries and source also requires that we
agree on a location for those files.  According to the Unix Filesystem
Hierarchy Specification, there are two possible locations: /usr/local
and /opt/<package>, with files then being installed in the usual
subdirectories (bin/, lib/, share/, include/, etc.) as appropriate.
Installation in /usr/local has the advantage that many common tools
include /usr/local in their paths when searching for modules whereas
/opt/<package> is never included.  The disadvantage of /usr/local is
the difficulty of uninstalling.  Installation in /usr/local will mix
with any number of additional programs installed on users' systems
making it difficult to keep track of which files need to be deleted.
There is a real danger that results---changes to the installation
process can leave installed code on users' systems that may preempt
more recent installations depending on how the systems' paths are
configured.  For this reason, I suggest that we adopt the convention
of installing code in /opt/dsl.  A clean uninstall can then be
guaranteed by removing this entire directory.  The disadvantage is
that tools like python, cmake, java, etc. will need to have their
paths augmented to import modules.  We will adopt the strategy pursued
by ROS and require users to run a bash script to configure their
environment.

Branches are also handled differently in hg.  In svn, branches, trunk,
and tags are just directories that follow a naming convention.  In hg,
branches are not folders; instead, your working copy can only reflect
one branch at a time.  This is an advantage, since users working
copies will always be structured the same way (in svn it was possible
for one user to check out the repository root and another to check out
just one branch).  

The root directory of all repositories should contain a CMakeLists.txt
file that oversees the build process for that entire repository.  I
propose the following top-level directories, not all of which need to
be present in a given repository.

bin*        -- Location where compiled executables will be placed.  The source
               for these executables should be located in tools and tests.
build*      -- Houses the build tree (object files, etc.).  Upon checkout
               this is the directory in which users should execute 'cmake ../'
cmake       -- cmake helper scripts, generally for instructing external 
               code how to link against code installed from this repository.
doc         -- Documentation specific to this repository and consisting of 
               plain text files only.
etc         -- Version-controlled resource files, e.g., initialization, 
               configuration files and small binaries such as icons.
gen*        -- Location where generated source (non-binary automatically 
               generated and non-version controlled files) will be placed.
include     -- c/c++ header files for libraries generated by this repository.
java        -- Java scripts.  Java class and jar files should be generated
               automatically by cmake and placed in gen/.
lcm         -- LCM type definitions, organized into subdirectories for each 
               LCM package.
lib*        -- Location where compiled shared and static libraries will be
               placed.
msg         -- ROS message definitions.
python      -- Python scripts.  
srv         -- ROS service definitions.
scripts     -- Shell scripts.
src         -- c/c++ source files for libraries generated by this repository.
               Organized into subdirectories for each library.
tests       -- c/c++ source and header files for executables generated by this
               repository where these executables are specifically intended for
               testing the functionality of libraries compiled by this 
               repository.  These executables may be called by cmake to perform
               automated post-compilation tests.
tools       -- c/c++ source and header files for executables generated by this
               repository.  These tools should be closely tied to any libraries
               also generated by this repository but may require linking against
               other repositories as well.  Organized into subdirectories for
               each tool.

* These directories will appear as initially empty upon checkout (in
  fact they contain a single hidden file .hgempty).  These directories
  can be safely emptied by users with a call to rm.  'make clean' will
  also remove most of the contents of these directories (though empty
  subdirectories will remain---cmake handles files well, but is mostly
  unaware of directories).

I have prototyped this layout for a few repositories hosted on
bitbucket, dslmeta, dslcommon, and rov-core.  (dslcommon was derived
from dsltools, a collection of mostly libraries developed by S. Suman
and used by navest but derived from source originally unique to rov.)

To build the repositories, start by cloning dslmeta
(ssh://hg@bitbucket.org/whoidsl/dslmeta).  dslmeta contains
cross-repository helper scripts to set up your environment and
directories for building and using other DSL software that conforms to
this model.  After cloning, cd into the build subdirectory and type
'cmake ../'.  The cmake process will prompt you to configure your
environment by sourcing ../etc/environment and adding a line to your
.bashrc file (this is needed to configure your path, to augment your
python module path, etc.).  Still within the build directory type
'sudo make install' to create the /opt/dsl directory and populate it
with some cmake helper scripts.

Install lcm from the lcm svn repo - instructions are here:
http://code.google.com/p/lcm/wiki/BuildInstructions
Once you have made lcm (with "make") then do a "sudo make install" to install lcm in your system.

The following describes how to test known-compatible versions of dslcommon,
navest, and rov-core.  

To build dslcommon:
$ hg clone ssh://hg@bitbucket.org/whoidsl/dslcommon
$ hg up "Works with rov-core 63551a8a38c7"
$ cd dslcommon/build
$ cmake ../ (or ccmake ../)
$ make
$ sudo make install

Versions of both navest and rov-core compile against the libraries
installed by dslcommon.  To trial navest, clone the repo and update to
the bleeding-edge branch:

$ hg clone ssh://hg@bitbucket.org/whoidsl/navest 
$ cd navest
$ hg up bleeding-edge
$ cd navest/build
$ cmake ../src/

As of 2013-08-08 navest has been partially converted to the repository
layout proposed in this document.

To trial a full-featured version of rov-core, which conforms
to the directory structure and build system proposed above:

$ hg clone ssh://hg@bitbucket.org/whoidsl/rov-core
$ cd rov-core/build
$ hg up -r "Stable against dslcommon libs."
$ cmake ../
$ make; 

This revision of rov-core does not install a system-wide executable (there
is no "make install" step).

Neither rov-core nor navest use a system-wide standard for
initialization files as of 2013-08-08.  

The layout and build procedure proposed here conforms in large part to
the build system adopted for ROS groovy and later versions, but does
not require ROS.  As of 2013-08-05 we have abandoned any plans to
adopt ROS, except possibly in part for a replacement mission
controller.

